	// Polygon
	// geometry
	var geometryPolygon = new THREE.Geometry();
	geometryPolygon.vertices.push( new THREE.Vector3( 0, 0, 0 ) );
	geometryPolygon.vertices.push( new THREE.Vector3( 5, 0, -2 ) );
	geometryPolygon.vertices.push( new THREE.Vector3( -5, 0, 2 ) );
	geometryPolygon.vertices.push( new THREE.Vector3( 0, 0, 0 ) ); // close the loop
	geometryPolygon.faces.push(new THREE.Face3(1,2,3));

	// material
	var material = new THREE.LineBasicMaterial( { color: 0xff0000, linewidth: 400 } );

	// line
	var line = new THREE.Line( geometryPolygon, material );
	scene.add( line );
	console.log("line: "); console.log(line);



	// CRITICAL 
	http://stemkoski.github.io/Three.js/Mouse-Over.html


function drawCubesThree(scene){
	var geometryBox = new THREE.BoxGeometry( 10, 10,10 );
	var material = new THREE.MeshNormalMaterial();
	group = new THREE.Group();
	for ( var i = 0; i < 10; i ++ ) {
		var mesh = new THREE.Mesh( geometryBox, material );
		mesh.position.x = Math.random() * 250 - 150;
		mesh.position.y = Math.random() * 250 - 150;
		mesh.position.z = Math.random() * 250 - 150;
		
		mesh.rotation.x = Math.random() * 2 * Math.PI;
		mesh.rotation.y = Math.random() * 2 * Math.PI;
		mesh.matrixAutoUpdate = false;
		mesh.updateMatrix();
		group.add( mesh );
	}
	scene.add( group );
}




function drawGrid(scene){
	// Grid -- Calculation is wrong
	var size = 500, step = 10;
	//var size = data.stations.station.length, step = 50;
	var geometryBox = new THREE.Geometry();
	for ( var i = - size ; i <= size; i += step ) {
	    geometryBox.vertices.push( new THREE.Vector3( - size, 0, i ) );
	    geometryBox.vertices.push( new THREE.Vector3(  size, 0, i ) );
	    geometryBox.vertices.push( new THREE.Vector3( i, 0, - size ) );
	    geometryBox.vertices.push( new THREE.Vector3( i, 0,   size ) );
	}
	var material = new THREE.LineBasicMaterial( { color: 0x000000, opacity: .7 } );
	var line = new THREE.Line( geometryBox, material );
	line.type = THREE.LinePieces;
	scene.add( line );	
}

function drawTestLinesThree(scene){
	// Polygon
	// geometryBox
	var geometryBoxPolygon = new THREE.Geometry();
	geometryBoxPolygon.vertices.push( new THREE.Vector3( 5, 0, 5 ) );
	geometryBoxPolygon.vertices.push( new THREE.Vector3( -5, 0, 5 ) );
	geometryBoxPolygon.vertices.push( new THREE.Vector3( 5, 0, -5 ) );
	geometryBoxPolygon.vertices.push( new THREE.Vector3( -5, 0, -5 ) );
	geometryBoxPolygon.vertices.push( new THREE.Vector3( -5, 0, -15 ) );
	geometryBoxPolygon.faces.push(new THREE.Face3(1,2,3));
	// material
	var material = new THREE.LineBasicMaterial( { color: 0xff0000, linewidth: 400 } );
	// line
	var line = new THREE.Line( geometryBoxPolygon, material );
	scene.add( line );
	console.log("line: "); console.log(line);
}



// Spline and boxes


function addPoint() {
	splinePointsLength ++;
	positions.push( addSplineObject().position );
	updateSplineOutline();
}

function removePoint() {
	if ( splinePointsLength <= 4 ) {
		return;
	}
	splinePointsLength --;
	positions.pop();
	scene.remove( splineHelperObjects.pop() );
	updateSplineOutline();
}

function updateSplineOutline() {
	for ( var k in splines ) {
		var spline = splines[ k ];
		splineMesh = spline.mesh;
		for ( var i = 0; i < ARC_SEGMENTS; i ++ ) {
			var p = splineMesh.geometry.vertices[ i ];
			p.copy( spline.getPoint( i /  ( ARC_SEGMENTS - 1 ) ) );
		}
		splineMesh.geometry.verticesNeedUpdate = true;
	}
}

function exportSpline() {
	var strplace = [];
	for ( var i = 0; i < splinePointsLength; i ++ ) {
		var p = splineHelperObjects[ i ].position;
		strplace.push( 'new THREE.Vector3({0}, {1}, {2})'.format( p.x, p.y, p.z ) )
	}
	console.log( strplace.join( ',\n' ) );
	var code = '[' + ( strplace.join( ',\n\t' ) ) + ']';
	prompt( 'copy and paste code', code );
}

function addSplineObject( position ) {
	var material = new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } );
	var object = new THREE.Mesh( geometry, material );
	if ( position ) {
		object.position.copy( position );
	} else {
		object.position.x = Math.random() * 1000 - 500;
		object.position.y = Math.random() * 600;
		object.position.z = Math.random() * 800 - 400;
	}

	object.castShadow = true;
	object.receiveShadow = true;
	scene.add( object );
	splineHelperObjects.push( object );
	return object;
}

function addPoint() {
	splinePointsLength ++;
	positions.push( addSplineObject().position );
	updateSplineOutline();
}

function removePoint() {
	if ( splinePointsLength <= 4 ) { return; }
	splinePointsLength --;
	positions.pop();
	scene.remove( splineHelperObjects.pop() );
	updateSplineOutline();
}

function load( new_positions ) {
	while ( new_positions.length > positions.length ) { addPoint(); }
	while ( new_positions.length < positions.length ) { removePoint(); }
	for ( var i = 0; i < positions.length; i ++ ) {
		positions[ i ].copy( new_positions[ i ] );
	}
	updateSplineOutline();
}

function cancelHideTransorm() {
	if ( hiding ) clearTimeout( hiding );
}

function delayHideTransform() {
	cancelHideTransorm();
	hideTransform();
}

function hideTransform() {
	hiding = setTimeout( function() {
		transformControl.detach( transformControl.object );
	}, 2500 )
}


// Inside init
// Gui
	var gui = new dat.GUI();
	gui.add( params, 'uniform' );
	gui.add( params, 'tension', 0, 1 ).step( 0.01 ).onChange( function( value ) {
		splines.uniform.tension = value; updateSplineOutline();
	});
	gui.add( params, 'centripetal' ); gui.add( params, 'chordal' );
	gui.add( params, 'addPoint' ); gui.add( params, 'removePoint' );
	gui.add( params, 'exportSpline' );
	gui.open();

	/*******
	 * Curves and boxes
	 *********/
	for ( var i = 0; i < splinePointsLength; i ++ ) { addSplineObject( positions[ i ] ); }
	positions = [];

	for ( var i = 0; i < splinePointsLength; i ++ ) { positions.push( splineHelperObjects[ i ].position ); }
	var geometry = new THREE.Geometry();
	for ( var i = 0; i < ARC_SEGMENTS; i ++ ) { geometry.vertices.push( new THREE.Vector3() ); }

	var curve = new THREE.CatmullRomCurve3( positions );
	curve.type = 'catmullrom';
	curve.mesh = new THREE.Line( geometry.clone(), new THREE.LineBasicMaterial( {
		color: 0xff0000, opacity: 0.35, linewidth: 2
		} ) );
	curve.mesh.castShadow = true; splines.uniform = curve;

	curve = new THREE.CatmullRomCurve3( positions );
	curve.type = 'centripetal';
	curve.mesh = new THREE.Line( geometry.clone(), new THREE.LineBasicMaterial( {
		color: 0x00ff00, opacity: 0.35, linewidth: 2
		} ) );
	curve.mesh.castShadow = true;
	splines.centripetal = curve;

	curve = new THREE.CatmullRomCurve3( positions );
	curve.type = 'chordal';
	curve.mesh = new THREE.Line( geometry.clone(), new THREE.LineBasicMaterial( {
		color: 0x0000ff, opacity: 0.35, linewidth: 2
		} ) );
	curve.mesh.castShadow = true;
	splines.chordal = curve;

	for ( var k in splines ) {
		var spline = splines[ k ]; scene.add( spline.mesh );
	}

	load( [ new THREE.Vector3( 0, 500, 0 ),
			new THREE.Vector3( -53.56300074753207, 171.49711742836848, -14.495472686253045 ),
			new THREE.Vector3( -91.40118730204415, 176.4306956436485, -6.958271935582161 ),
			new THREE.Vector3( -383.785318791128, 491.1365363371675, 47.869296953772746 ) ] );
	// -- 

// Inside render
	// Render code from the webgl_geometry_splines
	splines.uniform.mesh.visible = params.uniform;
	splines.centripetal.mesh.visible = params.centripetal;
	splines.chordal.mesh.visible = params.chordal;
